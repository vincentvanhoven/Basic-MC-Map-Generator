// Info from https://minecraft.fandom.com/wiki/Chunk_format:
// - Packed array of 4096 indices, stored in an array of 64-bit ints.
// - If only one block state is present in the palette, this field is not required and the block fills the whole section.
// - All indices are the same length: the minimum amount of bits required to represent the largest index in the palette.
// - These indices have a minimum size of 4 bits.
// - Since 1.16, the indices are not packed across multiple elements of the array, meaning that if there is no more space in
//   a given 64-bit integer for the next index, it starts instead at the first (lowest) bit of the next 64-bit element.

// Info from https://wiki.vg/Chunk_Format#Paletted_Container_structure:
// - Chunk sections
//   - Chunk sections are 16x16x16 collections of blocks.
//   - Chunk sections store blocks, biomes and light data (both block light and sky light).
//   - Chunk sections can be associated with at most two palettes — one for blocks, one for biomes.
//   - Chunk sections can contain at maximum 4096 (16×16×16, or 212) unique block state IDs, and 64 (4×4×4) unique biome IDs (highly unlikely).
// - Registries
//   - The registries are the primary, protocol-wide mappings from block states and biomes to numeric identifiers.
//   - The block state registry is hardcoded into Minecraft.
//   - One block state ID is allocated for each unique block state of a block
//   - If a block has multiple properties then the number of allocated states is the product of the number of values for each property.
//   - The block state IDs belonging to a given block are always consecutive. Other than that, the ordering of block states is hardcoded, and somewhat arbitrary.
//   - The Data Generators system can be used to generate a list of all block state IDs.
//   - The biome registry is defined at runtime as part of the Registry Data packet sent by the server during the Configuration phase.
//   - The Notchian server pulls these biome definitions from data packs.
// - Palettes
//   - A palette maps a smaller set of IDs within a chunk section to registry IDs
//   - For example:
//     - Encoding any of the IDs in the block state registry as of vanilla 1.20.2 requires 15 bits.
//     - Given that most sections contain only a few different blocks, using 15 bits per block to represent a chunk section that is
//       only stone, gravel, and air would be extremely wasteful. Instead, a list of registry IDs is sent (for instance, 40 57 0),
//       and indices into that list — the palette — are sent as the block state or biome values within the chunk (so 40 would be sent
//       as 0, 57 as 1, and 0 as 2)
//     - The number of bits used to encode palette indices varies based on the number of indices, and the registry in question.
//     - If a threshold on the number of unique IDs in the section is exceeded, a palette is not used, and registry IDs are used directly instead.
// - Heightmaps
//   - Minecraft uses heightmaps to optimize various operations on both the server and the client.
//   - All heightmaps share the basic structure of encoding the position of the highest "occupied" block in each column of blocks within a chunk
//     column. The differences have to do with which blocks are considered to be "occupied".
//   - Rather than calculating them from the chunk data, the client receives the initial heightmaps it needs from the server. This trades an
//     increase in network usage for a decrease in client-side processing. Once a chunk is loaded, the client updates its heightmaps based on
//     block changes independently from the server.